{"version":3,"sources":["constants/blockchain.ts","hooks/web3/helpers/switch-network.ts","constants/messages.ts","hooks/web3/web3-context.tsx","hooks/web3/helpers/get-mainnet-uri.ts","components/Main.jsx","components/Header.jsx","App.jsx","index.js"],"names":["Networks","switchRequest","window","ethereum","request","method","params","chainId","swithNetwork","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","t0","code","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","name","symbol","decimals","t1","console","log","stop","apply","this","arguments","DEFAULD_NETWORK","Polygon","messages","INFURA_ID","Web3Context","React","createContext","useWeb3Context","web3Context","useContext","Error","onChainProvider","useMemo","objectSpread","Web3ContextProvider","children","_useState","useDispatch","useState","_useState2","slicedToArray","connected","setConnected","_useState3","_useState4","chainID","_useState5","_useState6","providerChainID","setProviderChainID","_useState7","_useState8","address","setAddress","_useState9","_useState10","uri","_useState11","StaticJsonRpcProvider","_useState12","provider","setProvider","_useState13","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","defineProperty","custom-walletlink","display","logo","description","appName","networkUrl","concat","WalletLink","connector","_connector","_","walletLink","makeWeb3Provider","enable","abrupt","_x","_x2","web3Modal","hasCachedProvider","cachedProvider","_initListeners","useCallback","rawProvider","on","setTimeout","location","reload","_ref2","_callee2","chain","_context2","changeNetwork","_x3","_newNetwork","oldNetwork","_ref3","_callee3","otherChainID","network","_context3","Number","_x4","connect","_callee4","connectedProvider","connectedAddress","_context4","sent","Web3Provider","getNetwork","then","getSigner","getAddress","Ethereum","checkWrongNetwork","_ref5","_callee5","_context5","confirm","disconnect","_callee6","_context6","clearCachedProvider","react_default","createElement","Provider","value","Main","props","_useWeb3Context","nftContract","setNftContract","setMainLoading","totalRemained","setTotalRemained","numberMint","setNumberMint","mintCost","setMintCost","noticeToShow","setNoticeToShow","useEffect","loadData","_connectToAccount","web3","_nftContract","isPresale","isPublicSale","_preCost","_publicCost","totalSupply","Web3","eth","Contract","NftJson","abi","methods","isPresaleOn","call","isPublicSaleOn","getMintCostPre","toString","Math","pow","getMintCost","mintNFT","mint","send","from","confirmationNumber","receipt","error","message","class","style","backgroundImage","backgroundSize","src","alt","width","height","marginLeft","color","fontSize","marginTop","onClick","id","aria-hidden","type","Header","backgroundColor","href","substring","length","App","store","createStore","state","undefined","action","text","dispatch","es","web3_context_Web3ContextProvider","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c5158cc.chunk.js","sourcesContent":["export const TOKEN_DECIMALS = 18;\n\nexport enum Networks {\n  AVAX = 43114,\n  Ethereum = 1,\n  Polygon = 137\n}\n\nexport const DEFAULD_NETWORK = Networks.Polygon;\n","import { Networks } from \"../../../constants/blockchain\";\n\nconst switchRequest = () => {\n    return window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x89\" }],\n    });\n};\n\nconst addChainRequest = () => {\n    return window.ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: [\n            {\n                chainId: \"0x89\",\n                chainName: \"Polygon Mainnet\",\n                rpcUrls: [\"https://polygon-rpc.com\"],\n                blockExplorerUrls: [\"https://polygonscan.com/\"],\n                nativeCurrency: {\n                    name: \"MATIC\",\n                    symbol: \"MATIC\",\n                    decimals: 18,\n                },\n            },\n        ],\n    });\n};\n\nexport const swithNetwork = async () => {\n    if (window.ethereum) {\n        try {\n            await switchRequest();\n        } catch (error: any) {\n            if (error.code === 4902) {\n                try {\n                    await addChainRequest();\n                    await switchRequest();\n                } catch (addError) {\n                    console.log(error);\n                }\n            }\n            console.log(error);\n        }\n    }\n};\n","export const messages = {\n  please_connect: \"Please connect your wallet to the polygon network to use Wonderland.\",\n  please_connect_wallet: \"Please connect your wallet.\",\n  try_mint_more: (value: string) =>\n    `You're trying to mint more than the maximum payout available! The maximum mint payout is ${value} SBR.`,\n  before_minting: \"Before minting, enter a value.\",\n  existing_mint:\n    \"You have an existing mint. Minting will reset your vesting period and forfeit any pending claimable rewards. We recommend claiming rewards first or using a fresh wallet. Do you still wish to proceed?\",\n  before_stake: \"Before staking, enter a value.\",\n  before_unstake: \"Before un staking, enter a value.\",\n  tx_successfully_send: \"Your transaction was successfully sent\",\n  your_balance_updated: \"Your balance was successfully updated\",\n  nothing_to_claim: \"You have nothing to claim\",\n  something_wrong: \"Something went wrong\",\n  switch_to_polygon: \"Switch to the polygon network?\",\n  slippage_too_small: \"Slippage too small\",\n  slippage_too_big: \"Slippage too big\",\n  your_balance_update_soon: \"Your balance will update soon\",\n  before_wrap: \"Before wrapping, enter a value.\",\n  before_unwrap: \"Before un wrapping, enter a value.\",\n};\n","import React, { useState, ReactElement, useContext, useMemo, useCallback } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { StaticJsonRpcProvider, JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { getMainnetURI,swithNetwork } from \"./helpers\";\nimport { DEFAULD_NETWORK } from \"../../constants\";\nimport { Networks } from \"../../constants\";\nimport { messages } from \"../../constants/messages\";\nimport { useDispatch } from \"react-redux\";\nimport WalletLink from 'walletlink'\n\n\nconst INFURA_ID = 'https://mainnet.infura.io/v3/e617ec1a816244569977175ec27309ba'\n\n\ntype onChainProvider = {\n    connect: () => Promise<Web3Provider>;\n    disconnect: () => void;\n    checkWrongNetwork: () => Promise<boolean>;\n    provider: JsonRpcProvider;\n    address: string;\n    connected: Boolean;\n    web3Modal: Web3Modal;\n    chainID: number;\n    web3?: any;\n    providerChainID: number;\n    hasCachedProvider: () => boolean;\n};\n\nexport type Web3ContextData = {\n    onChainProvider: onChainProvider;\n} | null;\n\nconst Web3Context = React.createContext<Web3ContextData>(null);\n\nexport const useWeb3Context = () => {\n    const web3Context = useContext(Web3Context);\n    if (!web3Context) {\n        throw new Error(\"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\");\n    }\n    const { onChainProvider } = web3Context;\n    return useMemo(() => {\n        return { ...onChainProvider };\n    }, [web3Context]);\n};\n\nexport const useAddress = () => {\n    const { address } = useWeb3Context();\n    return address;\n};\n\nexport const Web3ContextProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n    const dispatch = useDispatch();\n\n    const [connected, setConnected] = useState(false);\n    const [chainID, setChainID] = useState(DEFAULD_NETWORK);\n    const [providerChainID, setProviderChainID] = useState(DEFAULD_NETWORK);\n    const [address, setAddress] = useState(\"\");\n\n    const [uri, setUri] = useState(getMainnetURI());\n    const [provider, setProvider] = useState<JsonRpcProvider>(new StaticJsonRpcProvider(uri));\n\n    const [web3Modal] = useState<Web3Modal>(\n        new Web3Modal({\n            cacheProvider: true,\n            providerOptions: {\n                walletconnect: {\n                    package: WalletConnectProvider,\n                    options: {\n                        rpc: {\n                            // [Networks.Ethereum]: getMainnetURI(),\n                      ['1']: INFURA_ID, // required\n\n                        },\n                    },\n                },\n                'custom-walletlink': {\n                    display: {\n                      logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n                      name: 'Coinbase',\n                      description: 'Connect to Coinbase Wallet (not Coinbase App)',\n                    },\n                    options: {\n                      appName: 'Coinbase', // Your app name\n                      networkUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n                      chainId: 1,\n                    },\n                    package: WalletLink,\n                    connector: async (_, options) => {\n                      const { appName, networkUrl, chainId } = options\n                      const walletLink = new WalletLink({\n                        appName,\n                      })\n                      const provider = walletLink.makeWeb3Provider(networkUrl, chainId)\n                      await provider.enable()\n                      return provider\n                    },\n                  },\n            },\n        }),\n    );\n\n    const hasCachedProvider = (): boolean => {\n        if (!web3Modal) return false;\n        if (!web3Modal.cachedProvider) return false;\n        return true;\n    };\n\n    const _initListeners = useCallback(\n        (rawProvider: JsonRpcProvider) => {\n            if (!rawProvider.on) {\n                return;\n            }\n\n            rawProvider.on(\"accountsChanged\", () => setTimeout(() => window.location.reload(), 1));\n\n            rawProvider.on(\"chainChanged\", async (chain: number) => {\n                changeNetwork(chain);\n            });\n\n            rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\n                if (!oldNetwork) return;\n                window.location.reload();\n            });\n        },\n        [provider],\n    );\n\n    const changeNetwork = async (otherChainID: number) => {\n        const network = Number(otherChainID);\n\n        setProviderChainID(network);\n    };\n\n    const connect = useCallback(async () => {\n        const rawProvider = await web3Modal.connect();\n        setProvider(rawProvider);\n\n        _initListeners(rawProvider);\n\n        const connectedProvider = new Web3Provider(rawProvider, \"any\");\n\n        const chainId = await connectedProvider.getNetwork().then(network => Number(network.chainId));\n        const connectedAddress = await connectedProvider.getSigner().getAddress();\n\n        setAddress(connectedAddress);\n\n        setProviderChainID(chainId);\n\n        if (chainId === Networks.Ethereum) {\n        }\n\n        setConnected(true);\n\n        return connectedProvider;\n    }, [provider, web3Modal, connected]);\n\n    const checkWrongNetwork = async (): Promise<boolean> => {\n        if (providerChainID !== DEFAULD_NETWORK) {\n            const shouldSwitch = window.confirm(messages.switch_to_polygon);\n            if (shouldSwitch) {\n                await swithNetwork();\n                window.location.reload();\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n    const disconnect = useCallback(async () => {\n        web3Modal.clearCachedProvider();\n        setConnected(false);\n\n        setTimeout(() => {\n            window.location.reload();\n        }, 1);\n    }, [provider, web3Modal, connected]);\n\n    const onChainProvider = useMemo(\n        () => ({\n            connect,\n            disconnect,\n            hasCachedProvider,\n            provider,\n            connected,\n            address,\n            chainID,\n            web3Modal,\n            providerChainID,\n            checkWrongNetwork,\n        }),\n        [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, providerChainID],\n    );\n    //@ts-ignore\n    return <Web3Context.Provider value={{ onChainProvider }}>{children}</Web3Context.Provider>;\n};\n","export const getMainnetURI = (): string => {\n    return \"https://api.avax.network/ext/bc/C/rpc\";\n};\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Web3 from \"web3\";\r\nimport NftJson from \"../abis/NftJson.json\";\r\n\r\nimport { useWeb3Context } from \"../hooks/web3\";\r\n\r\n\r\nexport default function Main(props) {\r\n\r\n    const { connect, disconnect, connected, providerChainID, checkWrongNetwork, address, provider } = useWeb3Context();\r\n\r\n    const [nftContract, setNftContract] = useState(null);\r\n    const [mainLoading, setMainLoading] = useState(false);\r\n    const [totalRemained, setTotalRemained] = useState(10000)\r\n    const [numberMint, setNumberMint] = useState(1);\r\n    const [mintCost, setMintCost] = useState(240)\r\n    const [noticeToShow, setNoticeToShow] = useState(\"Please connect wallet to Mint NFT\");\r\n\r\n\r\n    const incNumber = () =>\r\n        numberMint > 19 ? setNumberMint(numberMint) : setNumberMint(numberMint + 1);\r\n    const decNumber = () =>\r\n        numberMint > 1 ? setNumberMint(numberMint - 1) : setNumberMint(numberMint);\r\n\r\n    useEffect(() => {\r\n        if (connected) {\r\n            loadData();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (connected) {\r\n            if (providerChainID == 137) {\r\n                loadData();\r\n            } else {\r\n                checkWrongNetwork()\r\n            }\r\n        }\r\n    }, [connected]);\r\n\r\n    const _connectToAccount = async () => {\r\n        if (!connected) {\r\n            setNoticeToShow('Connecting...');\r\n            connect()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const loadData = async () => {\r\n        setMainLoading(true);\r\n        const web3 = new Web3(provider);\r\n        const networkAddress = '0x982460171d5de3abbabf6226bdad7f827c22d9df';\r\n        const _nftContract = await new web3.eth.Contract(NftJson.abi, networkAddress);\r\n        setNftContract(_nftContract)\r\n\r\n        const isPresale = await _nftContract.methods.isPresaleOn().call();\r\n        var isPublicSale = false;\r\n        if (!isPresale) {\r\n            isPublicSale = await _nftContract.methods.isPublicSaleOn().call();\r\n        }\r\n        if (isPresale) {\r\n            const _preCost = await _nftContract.methods.getMintCostPre().call();\r\n            setMintCost(_preCost.toString() / 10 ** 18)\r\n            setNoticeToShow('Connected, Ready to mint NFT');\r\n\r\n        } else if (isPublicSale) {\r\n            const _publicCost = await _nftContract.methods.getMintCost().call();\r\n            setMintCost(_publicCost.toString() / 10 ** 18);\r\n            setNoticeToShow('Connected, Ready to mint NFT');\r\n\r\n        } else {\r\n            setNoticeToShow('NFT minting not started yet. Please Mint after Pre sale start');\r\n        }\r\n\r\n        const totalSupply = await _nftContract.methods.totalSupply().call();\r\n        setTotalRemained(10000 - totalSupply.toString());\r\n\r\n        setMainLoading(false);\r\n    }\r\n\r\n\r\n    const mintNFT = async () => {\r\n        if (connected) {\r\n            setNoticeToShow('Minting, Please Wait...');\r\n            setMainLoading(true);\r\n\r\n            await nftContract.methods\r\n                .mint(numberMint)\r\n                .send({ from: address, value: mintCost*10**18*numberMint })\r\n                .on('confirmation', (confirmationNumber, receipt) => {\r\n                    console.log(receipt);\r\n                    loadData();\r\n                })\r\n                .on('error', function (error, receipt) {\r\n                    console.log(error);\r\n                    setNoticeToShow(error.message);\r\n                    loadData();\r\n                });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <section class=\"banner-sec\" style={{ backgroundImage: 'url(images/background.png)', backgroundSize: \"cover\" }}>\r\n            <div class=\"container\">\r\n                <div class=\"row\" >\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"banner-text\">\r\n                            <img src=\"images/logo.png\" alt=\"Girl in a jacket\" width=\"650\" height=\"650\" style={{ marginLeft: \"60%\" }} />\r\n                            <h1 style={{ color: \"black\", marginLeft: \"65%\", fontSize: \"160%\", marginTop: \"10%\" }}>THE&nbsp;CULTIVATION&nbsp;HAS&nbsp;BEGUN&nbsp;!</h1>\r\n                            <p style={{ color: \"black\", fontSize: \"120%\", marginTop: \"10%\", marginLeft: \"59%\" }}>Crazy&#160;Cactus&#160;10,000&#160;one&#160;of&#160;a&#160;kind&#160;hand&#160;drawn&nbsp;collection&#160; </p>\r\n                            <p style={{ color: \"black\", marginLeft: \"15%\" }}>Each&#160;trait&#160;is&#160;meticulously&#160;created&#160;and&#160;crafted,&#160;then&#160;generated&#160;by&#160;an&#160;algorithm&#160;to&#160;create&#160;unique&#160;art&#160;pieces.</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mint-solpup-main\">\r\n                <h3 style={{ color: \"black\" }}>MINT Crazy Cactus Soon!</h3>\r\n                <p style={{ color: \"black\" }}>{totalRemained} remaining / {mintCost} Matic per Crazy Cactus</p>\r\n                <div class=\"min-qty-main\">\r\n                    <div class=\"control\">\r\n                        <button class=\"bttn bttn-left\" onClick={decNumber} id=\"minus\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></button>\r\n                        <input type=\"number\" class=\"input\" id=\"input\" value={numberMint} />\r\n                        <button class=\"bttn bttn-right\" onClick={incNumber} id=\"plus\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\r\n                    </div>\r\n                    <button class=\"mint-now-btn\" >Pre-Sale: 160 Matic 22/01/22</button>\r\n\r\n                    <button class=\"mint-now-btn\" >Sale: 240 Matic 29/01/22</button>\r\n                    <br />\r\n                    {connected\r\n                        ?\r\n                        <button onClick={mintNFT} class=\"mint-now-btn-full\" >Mint Now</button>\r\n                        :\r\n                        <button onClick={_connectToAccount} class=\"mint-now-btn-full\" >Connect Wallet</button>\r\n                    }\r\n                    <div class=\"clear\">\r\n                        <p>{noticeToShow}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Web3 from \"web3\";\r\nimport NftJson from \"../abis/NftJson.json\";\r\n\r\nimport { useWeb3Context } from \"../hooks/web3\";\r\n\r\nexport default function Header(props) {\r\n\r\n    const { connect, disconnect, connected, address } = useWeb3Context();\r\n\r\n\r\n    return (\r\n        <div class=\"header\" style={{ backgroundColor: \"#97d7db\", backgroundSize: \"contain\" }}>\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-12\">\r\n                        <a href=\"#\" class=\"logo\"><img src=\"images/logo.png\" width=\"180\" height=\"180\" alt=\"\t\" /></a>\r\n\r\n                        <div class=\"h-main\">\r\n                            {connected\r\n                            ?\r\n                            <button onClick={disconnect} class=\"wallet-btn\">{`${address.substring(0,5)}...${address.substring(address.length - 5,address.length)}`}</button>\r\n                        :\r\n                            <button onClick={connect} class=\"wallet-btn\">Connect Wallet</button>\r\n                        }\r\n                            <div class=\"social\">\r\n                                <ul>\r\n                                    <li><a href=\"https://discord.gg/u2MHTpDjRz\"><img src=\"images/discord.svg\" height=\"30\" width=\"30\" alt=\"\"/></a></li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, HashRouter } from \"react-router-dom\";\r\n\r\nimport { Web3ContextProvider } from \"./hooks/web3\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from 'redux';\r\n\r\n\r\nimport Main from \"./components/Main\";\r\nimport Header from \"./components/Header\";\r\n\r\nexport default function App() {\r\n\r\n\r\n  function todos(state = [], action) {\r\n    switch (action.type) {\r\n      case 'ADD_TODO':\r\n        return state.concat([action.text])\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n  const store = createStore(todos, ['Use Redux'])\r\n\r\n  store.dispatch({\r\n    type: 'ADD_TODO',\r\n    text: 'Read the docs'\r\n  })\r\n\r\n\r\n  return (\r\n    <Provider store={store}>\r\n\r\n      <Web3ContextProvider>\r\n        <Header />\r\n        <Main />\r\n      </Web3ContextProvider>\r\n    </Provider >\r\n\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}